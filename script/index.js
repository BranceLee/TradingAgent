import { rm } from "fs/promises";
import cron from 'node-cron';
import { exec } from 'child_process';
import path from 'path';
import fs from 'fs';

// ËÇ°Á•®ÂêçÂçïÊñá‰ª∂
const STOCK_FILE = path.resolve('stocks.txt');
// Êó•ÂøóÁõÆÂΩï
const LOG_DIR = path.resolve(process.cwd(), 'test-results');
if (!fs.existsSync(LOG_DIR)) fs.mkdirSync(LOG_DIR, { recursive: true });

async function clearTestResults() {
  const resultsDir = path.resolve("test-results");

  try {
    await rm(resultsDir, { recursive: true, force: true });
    console.log(`üóëÔ∏è Cleared: ${resultsDir}`);
  } catch (err) {
    console.error("‚ùå Failed to clear test-results:", err);
  }
}

clearTestResults();

// Node-cron ÂÆöÊó∂‰ªªÂä°
// Ê†ºÂºèÔºö"ÂàÜ Êó∂ * * *" ‰æãÂ¶ÇÊØèÂ§© 03:00 -> "0 3 * * *"
const scheduleTime = '0 3 * * *';


console.log(`üïí Scheduling Playwright analysis at ${scheduleTime}`);

const schedule = async () => {
  console.log(`üöÄ Start running analysis at ${new Date().toISOString()}`);

  const timestamp = new Date().toISOString().replace(/[:T]/g, '-').split('.')[0];
  const logFile = path.join(LOG_DIR, `run-analysis-${timestamp}.log`);

  // ÊâßË°å Playwright ÊµãËØïÂëΩ‰ª§
  // ÂÅáËÆæ npm run analysis ÂèØ‰ª•ËØªÂèñ STOCKS_FILE ÁéØÂ¢ÉÂèòÈáè
  const cmd = `STOCKS_FILE=${STOCK_FILE} npm run analysis`;

  console.log(`Running stock, logging to ${logFile}`);
  exec(cmd, (err, stdout, stderr) => {
    fs.appendFileSync(logFile, stdout);
    fs.appendFileSync(logFile, stderr);
    if (err) {
      console.error(`‚ùå Error running stock:`, err);
    } else {
      console.log(`‚úÖ Finished stock`);
    }
  });
}

cron.schedule(scheduleTime, schedule, {
  scheduled: true,
  timezone: "Asia/Shanghai"
});

// Debug
schedule()